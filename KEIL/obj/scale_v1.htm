<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\scale_v1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\scale_v1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Sun May  7 02:31:11 2023
<BR><P>
<H3>Maximum Stack Usage =        212 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; System_Init &rArr; Periph_Init &rArr; TIMER1_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SVC_Handler</a><BR>
 <LI><a href="#[6]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">PendSV_Handler</a><BR>
 <LI><a href="#[7]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SysTick_Handler</a><BR>
 <LI><a href="#[33]">ACMP01_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">ACMP01_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[33]">ACMP01_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[5b]">AIP_ClearScreen</a> from costumlcd.o(.text.AIP_ClearScreen) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[58]">AIP_Init</a> from costumlcd.o(.text.AIP_Init) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[5f]">AIP_SetCursor</a> from costumlcd.o(.text.AIP_SetCursor) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[61]">AIP_Spoint</a> from costumlcd.o(.text.AIP_Spoint) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[5c]">AIP_UpdateScreen</a> from costumlcd.o(.text.AIP_UpdateScreen) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[60]">AIP_WriteString</a> from costumlcd.o(.text.AIP_WriteString) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[5d]">AIP_draw_pixel</a> from costumlcd.o(.text.AIP_draw_pixel) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[5e]">AIP_writeChar</a> from costumlcd.o(.text.AIP_writeChar) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[5a]">AIP_writeCommand</a> from costumlcd.o(.text.AIP_writeCommand) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[59]">AIP_writeData</a> from costumlcd.o(.text.AIP_writeData) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[62]">AIP_writeNumber</a> from costumlcd.o(.text.AIP_writeNumber) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[8]">BOD_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[34]">BPWM0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3d]">BPWM1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[1f]">BRAKE0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[23]">BRAKE1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[c]">CLKFAIL_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3f]">CRPT_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[30]">DAC_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[b]">DEFAULT_IRQHandler</a> from startup_m251.o(.text) referenced 4 times from startup_m251.o(RESET)
 <LI><a href="#[31]">EADC_INT0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[32]">EADC_INT1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[35]">EADC_INT2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[36]">EADC_INT3_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[11]">EINT0_IRQHandler</a> from int_handler.o(.text.EINT0_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[12]">EINT1_IRQHandler</a> from int_handler.o(.text.EINT1_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[13]">EINT2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[14]">EINT3_IRQHandler</a> from int_handler.o(.text.EINT3_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[15]">EINT4_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[16]">EINT5_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[17]">GPA_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[18]">GPB_IRQHandler</a> from int_handler.o(.text.GPB_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[19]">GPC_IRQHandler</a> from int_handler.o(.text.GPC_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[1a]">GPD_IRQHandler</a> from int_handler.o(.text.GPD_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[1b]">GPE_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[1c]">GPF_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[4]">GetChar</a> from retarget.o(.text.GetChar) referenced from startup_m251.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2d]">I2C0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2e]">I2C1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[9]">IRCTRIM_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[53]">Init</a> from keypad.o(.text.Init) referenced from keypad.o(.text.newKeyPadObj)
 <LI><a href="#[42]">LCD_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[43]">OPA_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2f]">PDMA_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3e]">PSIO_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[20]">PWM0_P0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[21]">PWM0_P1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[22]">PWM0_P2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[24]">PWM1_P0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[25]">PWM1_P1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[26]">PWM1_P2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[a]">PWRWU_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[6]">PendSV_Handler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[48]">ProcessHardFault</a> from retarget.o(.text.ProcessHardFault) referenced from startup_m251.o(.text)
 <LI><a href="#[1d]">QSPI0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[40]">SC0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[4a]">SCREEN_1_AIP_A0Pin</a> from app.o(.text.SCREEN_1_AIP_A0Pin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[4c]">SCREEN_1_AIP_CSPin</a> from app.o(.text.SCREEN_1_AIP_CSPin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[4b]">SCREEN_1_AIP_ResetPin</a> from app.o(.text.SCREEN_1_AIP_ResetPin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[4d]">SCREEN_2_AIP_A0Pin</a> from app.o(.text.SCREEN_2_AIP_A0Pin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[4f]">SCREEN_2_AIP_CSPin</a> from app.o(.text.SCREEN_2_AIP_CSPin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[4e]">SCREEN_2_AIP_ResetPin</a> from app.o(.text.SCREEN_2_AIP_ResetPin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[50]">SCREEN_3_AIP_A0Pin</a> from app.o(.text.SCREEN_3_AIP_A0Pin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[52]">SCREEN_3_AIP_CSPin</a> from app.o(.text.SCREEN_3_AIP_CSPin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[51]">SCREEN_3_AIP_ResetPin</a> from app.o(.text.SCREEN_3_AIP_ResetPin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[49]">SH_Return</a> from retarget.o(.text.SH_Return) referenced from startup_m251.o(.text)
 <LI><a href="#[1e]">SPI0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3a]">SPI1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[5]">SVC_Handler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[54]">Scan</a> from keypad.o(.text.Scan) referenced from keypad.o(.text.newKeyPadObj)
 <LI><a href="#[3]">SendChar_ToUART</a> from retarget.o(.text.SendChar_ToUART) referenced from startup_m251.o(RESET)
 <LI><a href="#[7]">SysTick_Handler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[46]">SystemInit</a> from system_m251.o(.text.SystemInit) referenced from startup_m251.o(.text)
 <LI><a href="#[e]">TAMPER_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[44]">TK_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[27]">TMR0_IRQHandler</a> from int_handler.o(.text.TMR0_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[28]">TMR1_IRQHandler</a> from int_handler.o(.text.TMR1_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[29]">TMR2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2a]">TMR3_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2b]">UART0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2c]">UART1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[37]">UART2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[38]">UART3_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3c]">USBD_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[39]">USCI0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3b]">USCI1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[41]">USCI2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[f]">WDT_IRQHandler</a> from int_handler.o(.text.WDT_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[10]">WWDT_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[47]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m251.o(.text)
 <LI><a href="#[63]">fputc</a> from retarget.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[45]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[57]">readRowPin</a> from keypad.o(.text.readRowPin) referenced from keypad.o(.text.newKeyPadObj)
 <LI><a href="#[56]">resetColumnPin</a> from keypad.o(.text.resetColumnPin) referenced from keypad.o(.text.newKeyPadObj)
 <LI><a href="#[55]">setAllColumnPins</a> from keypad.o(.text.setAllColumnPins) referenced from keypad.o(.text.newKeyPadObj)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[66]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[77]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b3]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[b4]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP01_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP01_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>CLKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CRPT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DEFAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EADC_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EADC_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EADC_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EADC_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>IRCTRIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>OPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PSIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PWM0_P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PWM0_P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PWM0_P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PWM1_P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PWM1_P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PWM1_P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USCI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USCI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SH_DoCommand</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_m251.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[65]"></a>__PC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_m251.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[69]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_ClearScreen
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[67]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[ba]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_uidiv$div0</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[bc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[bd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[be]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[70]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7a]"></a>APP_Handle</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, app.o(.text.APP_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = APP_Handle &rArr; APP_SetBatteryLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetBatteryLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>APP_Init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, app.o(.text.APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = APP_Init &rArr; newKeyPadObj &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newKeyPadObj
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newLCDObj
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>APP_SetBatteryLevel</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, app.o(.text.APP_SetBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = APP_SetBatteryLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Handle
</UL>

<P><STRONG><a name="[88]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, clk.o(.text.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[87]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, clk.o(.text.CLK_EnableXtalRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[80]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[82]"></a>CLK_GetPCLK0Freq</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, clk.o(.text.CLK_GetPCLK0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_GetPCLK0Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[83]"></a>CLK_GetPCLK1Freq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, clk.o(.text.CLK_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[97]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 160 bytes, Stack size 28 bytes, clk.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[84]"></a>CLK_SetHCLK</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, clk.o(.text.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[89]"></a>CLK_SetModuleClock</STRONG> (Thumb, 160 bytes, Stack size 52 bytes, clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[85]"></a>CLK_WaitClockReady</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, clk.o(.text.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[86]"></a>Clock_Init</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, clk_conf.o(.text.Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Clock_Init &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[11]"></a>EINT0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, int_handler.o(.text.EINT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EINT0_IRQHandler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EINT1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, int_handler.o(.text.EINT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EINT1_IRQHandler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, int_handler.o(.text.EINT3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EINT3_IRQHandler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>FMC_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, periph_conf.o(.text.FMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[8b]"></a>FMC_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Init
</UL>

<P><STRONG><a name="[18]"></a>GPB_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, int_handler.o(.text.GPB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPB_IRQHandler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GPC_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, int_handler.o(.text.GPC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPC_IRQHandler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPD_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, int_handler.o(.text.GPD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPD_IRQHandler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>GPIO_Init</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, periph_conf.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_Init &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[4]"></a>GetChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.text.GetChar))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>Periph_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, periph_conf.o(.text.Periph_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Periph_Init &rArr; TIMER1_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPII2S0_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[9c]"></a>Pin_Init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pin_conf.o(.text.Pin_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[48]"></a>ProcessHardFault</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, retarget.o(.text.ProcessHardFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ProcessHardFault &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpStack
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>SCREEN_1_AIP_A0Pin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_1_AIP_A0Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_1_AIP_A0Pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[4c]"></a>SCREEN_1_AIP_CSPin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_1_AIP_CSPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_1_AIP_CSPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[4b]"></a>SCREEN_1_AIP_ResetPin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_1_AIP_ResetPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_1_AIP_ResetPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[4d]"></a>SCREEN_2_AIP_A0Pin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_2_AIP_A0Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_2_AIP_A0Pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[4f]"></a>SCREEN_2_AIP_CSPin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_2_AIP_CSPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_2_AIP_CSPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[4e]"></a>SCREEN_2_AIP_ResetPin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_2_AIP_ResetPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_2_AIP_ResetPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[50]"></a>SCREEN_3_AIP_A0Pin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_3_AIP_A0Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_3_AIP_A0Pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[52]"></a>SCREEN_3_AIP_CSPin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_3_AIP_CSPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_3_AIP_CSPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[51]"></a>SCREEN_3_AIP_ResetPin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_3_AIP_ResetPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_3_AIP_ResetPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[49]"></a>SH_Return</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, retarget.o(.text.SH_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SH_Return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>SPII2S0_Init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, periph_conf.o(.text.SPII2S0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SPII2S0_Init &rArr; SPI_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetFIFO
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[95]"></a>SPI_Open</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, spi.o(.text.SPI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SPI_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPII2S0_Init
</UL>

<P><STRONG><a name="[96]"></a>SPI_SetFIFO</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, spi.o(.text.SPI_SetFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_SetFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPII2S0_Init
</UL>

<P><STRONG><a name="[99]"></a>SendChar</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(.text.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[3]"></a>SendChar_ToUART</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, retarget.o(.text.SendChar_ToUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, system_m251.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>

<P><STRONG><a name="[46]"></a>SystemInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_m251.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>System_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = System_Init &rArr; Periph_Init &rArr; TIMER1_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>TIMER0_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, periph_conf.o(.text.TIMER0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = TIMER0_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[92]"></a>TIMER1_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, periph_conf.o(.text.TIMER1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = TIMER1_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[a0]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, timer.o(.text.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[9e]"></a>TIMER_Open</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, timer.o(.text.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init
</UL>

<P><STRONG><a name="[27]"></a>TMR0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, int_handler.o(.text.TMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR0_IRQHandler &rArr; TIMER_ClearIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearIntFlag
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, int_handler.o(.text.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR1_IRQHandler &rArr; TIMER_ClearIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearIntFlag
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>UART2_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, periph_conf.o(.text.UART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = UART2_Init &rArr; UART_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[a3]"></a>UART_Open</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, uart.o(.text.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = UART_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>

<P><STRONG><a name="[f]"></a>WDT_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, int_handler.o(.text.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>WDT_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, periph_conf.o(.text.WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDT_Init &rArr; WDT_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_EnableInt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[a5]"></a>WDT_Open</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wdt.o(.text.WDT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[63]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, retarget.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fputc &rArr; SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[45]"></a>main</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = main &rArr; System_Init &rArr; Periph_Init &rArr; TIMER1_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Handle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7f]"></a>newKeyPadObj</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, keypad.o(.text.newKeyPadObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = newKeyPadObj &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[7e]"></a>newLCDObj</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, costumlcd.o(.text.newLCDObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = newLCDObj &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[a8]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bf]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[c0]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[c1]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[7c]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT0_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPD_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPC_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPB_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Handle
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a7]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newKeyPadObj
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newLCDObj
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[94]"></a>DumpStack</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, retarget.o(.text.DumpStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DumpStack
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
</UL>

<P><STRONG><a name="[9b]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[9d]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[8d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, periph_conf.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[9f]"></a>TIMER_EnableInt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, periph_conf.o(.text.TIMER_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init
</UL>

<P><STRONG><a name="[a4]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, periph_conf.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[a6]"></a>WDT_EnableInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, periph_conf.o(.text.WDT_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[a1]"></a>TIMER_GetIntFlag</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, int_handler.o(.text.TIMER_GetIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>TIMER_ClearIntFlag</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, int_handler.o(.text.TIMER_ClearIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>AIP_Init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, costumlcd.o(.text.AIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AIP_Init &rArr; AIP_writeCommand &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[59]"></a>AIP_writeData</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, costumlcd.o(.text.AIP_writeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AIP_writeData &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_UpdateScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[5a]"></a>AIP_writeCommand</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, costumlcd.o(.text.AIP_writeCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AIP_writeCommand &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_UpdateScreen
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[5b]"></a>AIP_ClearScreen</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, costumlcd.o(.text.AIP_ClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AIP_ClearScreen &rArr; AIP_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_WriteString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[5c]"></a>AIP_UpdateScreen</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, costumlcd.o(.text.AIP_UpdateScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AIP_UpdateScreen &rArr; AIP_writeData &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeCommand
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[5d]"></a>AIP_draw_pixel</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, costumlcd.o(.text.AIP_draw_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AIP_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_Spoint
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[5e]"></a>AIP_writeChar</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, costumlcd.o(.text.AIP_writeChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AIP_writeChar &rArr; AIP_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeNumber
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_WriteString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[5f]"></a>AIP_SetCursor</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, costumlcd.o(.text.AIP_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AIP_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_WriteString
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_ClearScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[60]"></a>AIP_WriteString</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, costumlcd.o(.text.AIP_WriteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AIP_WriteString &rArr; AIP_writeChar &rArr; AIP_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_SetCursor
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeChar
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_ClearScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[61]"></a>AIP_Spoint</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, costumlcd.o(.text.AIP_Spoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AIP_Spoint &rArr; AIP_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_draw_pixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[62]"></a>AIP_writeNumber</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, costumlcd.o(.text.AIP_writeNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AIP_writeNumber &rArr; AIP_writeChar &rArr; AIP_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[79]"></a>spi_transfer</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, costumlcd.o(.text.spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeCommand
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeData
</UL>

<P><STRONG><a name="[53]"></a>Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, keypad.o(.text.Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keypad.o(.text.newKeyPadObj)
</UL>
<P><STRONG><a name="[54]"></a>Scan</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, keypad.o(.text.Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Scan &rArr; readRowPin
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRowPin
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetColumnPin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAllColumnPins
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keypad.o(.text.newKeyPadObj)
</UL>
<P><STRONG><a name="[55]"></a>setAllColumnPins</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, keypad.o(.text.setAllColumnPins))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keypad.o(.text.newKeyPadObj)
</UL>
<P><STRONG><a name="[56]"></a>resetColumnPin</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, keypad.o(.text.resetColumnPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resetColumnPin
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keypad.o(.text.newKeyPadObj)
</UL>
<P><STRONG><a name="[57]"></a>readRowPin</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, keypad.o(.text.readRowPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readRowPin
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keypad.o(.text.newKeyPadObj)
</UL>
<P><STRONG><a name="[98]"></a>CLK_SysTickDelay</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, keypad.o(.text.CLK_SysTickDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan
</UL>

<P><STRONG><a name="[aa]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a9]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[ad]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ac]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
