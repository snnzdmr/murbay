<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\scale_v2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\scale_v2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Thu May 25 20:04:40 2023
<BR><P>
<H3>Maximum Stack Usage =        416 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; APP_Handle &rArr; setPrice &rArr; customValueInputFix &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SVC_Handler</a><BR>
 <LI><a href="#[6]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">PendSV_Handler</a><BR>
 <LI><a href="#[7]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SysTick_Handler</a><BR>
 <LI><a href="#[33]">ACMP01_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">ACMP01_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[33]">ACMP01_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[8d]">AIP_ClearScreen</a> from costumlcd.o(.text.AIP_ClearScreen) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[8a]">AIP_Init</a> from costumlcd.o(.text.AIP_Init) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[91]">AIP_SetCursor</a> from costumlcd.o(.text.AIP_SetCursor) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[94]">AIP_Spoint</a> from costumlcd.o(.text.AIP_Spoint) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[8e]">AIP_UpdateScreen</a> from costumlcd.o(.text.AIP_UpdateScreen) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[92]">AIP_WriteString</a> from costumlcd.o(.text.AIP_WriteString) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[93]">AIP_WriteStringLen</a> from costumlcd.o(.text.AIP_WriteStringLen) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[8f]">AIP_draw_pixel</a> from costumlcd.o(.text.AIP_draw_pixel) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[90]">AIP_writeChar</a> from costumlcd.o(.text.AIP_writeChar) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[8c]">AIP_writeCommand</a> from costumlcd.o(.text.AIP_writeCommand) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[8b]">AIP_writeData</a> from costumlcd.o(.text.AIP_writeData) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[95]">AIP_writeNumber</a> from costumlcd.o(.text.AIP_writeNumber) referenced from costumlcd.o(.text.newLCDObj)
 <LI><a href="#[8]">BOD_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[34]">BPWM0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3d]">BPWM1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[1f]">BRAKE0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[23]">BRAKE1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[c]">CLKFAIL_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3f]">CRPT_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[30]">DAC_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[b]">DEFAULT_IRQHandler</a> from startup_m251.o(.text) referenced 4 times from startup_m251.o(RESET)
 <LI><a href="#[9a]">Down</a> from menu.o(.text.Down) referenced from menu.o(.text.newMenuObj)
 <LI><a href="#[31]">EADC_INT0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[32]">EADC_INT1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[35]">EADC_INT2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[36]">EADC_INT3_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[11]">EINT0_IRQHandler</a> from int_handler.o(.text.EINT0_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[12]">EINT1_IRQHandler</a> from int_handler.o(.text.EINT1_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[13]">EINT2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[14]">EINT3_IRQHandler</a> from int_handler.o(.text.EINT3_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[15]">EINT4_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[16]">EINT5_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[97]">Enter</a> from menu.o(.text.Enter) referenced from menu.o(.text.newMenuObj)
 <LI><a href="#[98]">Exit</a> from menu.o(.text.Exit) referenced from menu.o(.text.newMenuObj)
 <LI><a href="#[17]">GPA_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[18]">GPB_IRQHandler</a> from int_handler.o(.text.GPB_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[19]">GPC_IRQHandler</a> from int_handler.o(.text.GPC_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[1a]">GPD_IRQHandler</a> from int_handler.o(.text.GPD_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[1b]">GPE_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[1c]">GPF_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[4]">GetChar</a> from retarget.o(.text.GetChar) referenced from startup_m251.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2d]">I2C0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2e]">I2C1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[9]">IRCTRIM_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[85]">Init</a> from keypad.o(.text.Init) referenced from keypad.o(.text.newKeyPadObj)
 <LI><a href="#[42]">LCD_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[96]">Menu_Init</a> from menu.o(.text.Menu_Init) referenced from menu.o(.text.newMenuObj)
 <LI><a href="#[9d]">NAU7802_available</a> from sparkfun_nau7802.o(.text.NAU7802_available) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[9b]">NAU7802_begin</a> from sparkfun_nau7802.o(.text.NAU7802_begin) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[ac]">NAU7802_beginCalibrateAFE</a> from sparkfun_nau7802.o(.text.NAU7802_beginCalibrateAFE) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[ae]">NAU7802_calAFEStatus</a> from sparkfun_nau7802.o(.text.NAU7802_calAFEStatus) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[a3]">NAU7802_calculateCalibrationFactor</a> from sparkfun_nau7802.o(.text.NAU7802_calculateCalibrationFactor) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[a0]">NAU7802_calculateZeroOffset</a> from sparkfun_nau7802.o(.text.NAU7802_calculateZeroOffset) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[ab]">NAU7802_calibrateAFE</a> from sparkfun_nau7802.o(.text.NAU7802_calibrateAFE) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[b6]">NAU7802_clearBit</a> from sparkfun_nau7802.o(.text.NAU7802_clearBit) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[9f]">NAU7802_getAverage</a> from sparkfun_nau7802.o(.text.NAU7802_getAverage) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[b7]">NAU7802_getBit</a> from sparkfun_nau7802.o(.text.NAU7802_getBit) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[a5]">NAU7802_getCalibrationFactor</a> from sparkfun_nau7802.o(.text.NAU7802_getCalibrationFactor) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[9e]">NAU7802_getReading</a> from sparkfun_nau7802.o(.text.NAU7802_getReading) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[b8]">NAU7802_getRegister</a> from sparkfun_nau7802.o(.text.NAU7802_getRegister) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[b4]">NAU7802_getRevisionCode</a> from sparkfun_nau7802.o(.text.NAU7802_getRevisionCode) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[a6]">NAU7802_getWeight</a> from sparkfun_nau7802.o(.text.NAU7802_getWeight) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[a2]">NAU7802_getZeroOffset</a> from sparkfun_nau7802.o(.text.NAU7802_getZeroOffset) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[9c]">NAU7802_isConnected</a> from sparkfun_nau7802.o(.text.NAU7802_isConnected) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[b1]">NAU7802_powerDown</a> from sparkfun_nau7802.o(.text.NAU7802_powerDown) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[b0]">NAU7802_powerUp</a> from sparkfun_nau7802.o(.text.NAU7802_powerUp) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[af]">NAU7802_reset</a> from sparkfun_nau7802.o(.text.NAU7802_reset) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[b5]">NAU7802_setBit</a> from sparkfun_nau7802.o(.text.NAU7802_setBit) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[a4]">NAU7802_setCalibrationFactor</a> from sparkfun_nau7802.o(.text.NAU7802_setCalibrationFactor) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[aa]">NAU7802_setChannel</a> from sparkfun_nau7802.o(.text.NAU7802_setChannel) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[a7]">NAU7802_setGain</a> from sparkfun_nau7802.o(.text.NAU7802_setGain) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[b2]">NAU7802_setIntPolarityHigh</a> from sparkfun_nau7802.o(.text.NAU7802_setIntPolarityHigh) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[b3]">NAU7802_setIntPolarityLow</a> from sparkfun_nau7802.o(.text.NAU7802_setIntPolarityLow) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[a8]">NAU7802_setLDO</a> from sparkfun_nau7802.o(.text.NAU7802_setLDO) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[b9]">NAU7802_setRegister</a> from sparkfun_nau7802.o(.text.NAU7802_setRegister) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[a9]">NAU7802_setSampleRate</a> from sparkfun_nau7802.o(.text.NAU7802_setSampleRate) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[a1]">NAU7802_setZeroOffset</a> from sparkfun_nau7802.o(.text.NAU7802_setZeroOffset) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[ad]">NAU7802_waitForCalibrateAFE</a> from sparkfun_nau7802.o(.text.NAU7802_waitForCalibrateAFE) referenced from sparkfun_nau7802.o(.text.newScaleObj)
 <LI><a href="#[1]">NMI_Handler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[43]">OPA_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2f]">PDMA_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3e]">PSIO_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[20]">PWM0_P0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[21]">PWM0_P1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[22]">PWM0_P2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[24]">PWM1_P0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[25]">PWM1_P1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[26]">PWM1_P2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[a]">PWRWU_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[6]">PendSV_Handler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[48]">ProcessHardFault</a> from retarget.o(.text.ProcessHardFault) referenced from startup_m251.o(.text)
 <LI><a href="#[1d]">QSPI0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[40]">SC0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[4d]">SCREEN_1_AIP_A0Pin</a> from app.o(.text.SCREEN_1_AIP_A0Pin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[4f]">SCREEN_1_AIP_CSPin</a> from app.o(.text.SCREEN_1_AIP_CSPin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[4e]">SCREEN_1_AIP_ResetPin</a> from app.o(.text.SCREEN_1_AIP_ResetPin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[50]">SCREEN_2_AIP_A0Pin</a> from app.o(.text.SCREEN_2_AIP_A0Pin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[52]">SCREEN_2_AIP_CSPin</a> from app.o(.text.SCREEN_2_AIP_CSPin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[51]">SCREEN_2_AIP_ResetPin</a> from app.o(.text.SCREEN_2_AIP_ResetPin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[53]">SCREEN_3_AIP_A0Pin</a> from app.o(.text.SCREEN_3_AIP_A0Pin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[55]">SCREEN_3_AIP_CSPin</a> from app.o(.text.SCREEN_3_AIP_CSPin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[54]">SCREEN_3_AIP_ResetPin</a> from app.o(.text.SCREEN_3_AIP_ResetPin) referenced from app.o(.text.APP_Init)
 <LI><a href="#[49]">SH_Return</a> from retarget.o(.text.SH_Return) referenced from startup_m251.o(.text)
 <LI><a href="#[1e]">SPI0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3a]">SPI1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[5]">SVC_Handler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[86]">Scan</a> from keypad.o(.text.Scan) referenced from keypad.o(.text.newKeyPadObj)
 <LI><a href="#[3]">SendChar_ToUART</a> from retarget.o(.text.SendChar_ToUART) referenced from startup_m251.o(RESET)
 <LI><a href="#[7]">SysTick_Handler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[46]">SystemInit</a> from system_m251.o(.text.SystemInit) referenced from startup_m251.o(.text)
 <LI><a href="#[e]">TAMPER_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[44]">TK_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[27]">TMR0_IRQHandler</a> from int_handler.o(.text.TMR0_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[28]">TMR1_IRQHandler</a> from int_handler.o(.text.TMR1_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[29]">TMR2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2a]">TMR3_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2b]">UART0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2c]">UART1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[37]">UART2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[38]">UART3_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3c]">USBD_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[39]">USCI0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3b]">USCI1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[41]">USCI2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[99]">Up</a> from menu.o(.text.Up) referenced from menu.o(.text.newMenuObj)
 <LI><a href="#[f]">WDT_IRQHandler</a> from int_handler.o(.text.WDT_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[10]">WWDT_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[47]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m251.o(.text)
 <LI><a href="#[4b]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[4a]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[bb]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[63]">f0_Saved</a> from menu.o(.text.f0_Saved) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[68]">f1_Saved</a> from menu.o(.text.f1_Saved) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[6d]">f2_Saved</a> from menu.o(.text.f2_Saved) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[73]">f3_Saved</a> from menu.o(.text.f3_Saved) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[76]">f4_Saved</a> from menu.o(.text.f4_Saved) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[7a]">f5_Saved</a> from menu.o(.text.f5_Saved) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[7f]">f6_Saved</a> from menu.o(.text.f6_Saved) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[82]">f7_Saved</a> from menu.o(.text.f7_Saved) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[ba]">fputc</a> from retarget.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4c]">isspace</a> from isspace_c.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[45]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[89]">readRowPin</a> from keypad.o(.text.readRowPin) referenced from keypad.o(.text.newKeyPadObj)
 <LI><a href="#[88]">resetAllColumnPins</a> from keypad.o(.text.resetAllColumnPins) referenced from keypad.o(.text.newKeyPadObj)
 <LI><a href="#[87]">setColumnPin</a> from keypad.o(.text.setColumnPin) referenced from keypad.o(.text.newKeyPadObj)
 <LI><a href="#[57]">shw_calibration</a> from menu.o(.text.shw_calibration) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[59]">shw_capacity</a> from menu.o(.text.shw_capacity) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[59]">shw_capacity</a> from menu.o(.text.shw_capacity) referenced from menu.o(.text.shw_capacity)
 <LI><a href="#[5a]">shw_decimalPoint</a> from menu.o(.text.shw_decimalPoint) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[5a]">shw_decimalPoint</a> from menu.o(.text.shw_decimalPoint) referenced from menu.o(.text.shw_decimalPoint)
 <LI><a href="#[84]">shw_f10a</a> from menu.o(.text.shw_f10a) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[64]">shw_f1a_3000</a> from menu.o(.text.shw_f1a_3000) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[65]">shw_f1b_6000</a> from menu.o(.text.shw_f1b_6000) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[66]">shw_f1c_dual1</a> from menu.o(.text.shw_f1c_dual1) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[67]">shw_f1d_dual2</a> from menu.o(.text.shw_f1d_dual2) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[69]">shw_f2a_3</a> from menu.o(.text.shw_f2a_3) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[6a]">shw_f2b_6</a> from menu.o(.text.shw_f2b_6) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[6b]">shw_f2c_15</a> from menu.o(.text.shw_f2c_15) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[6c]">shw_f2d_30</a> from menu.o(.text.shw_f2d_30) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[6e]">shw_f3a</a> from menu.o(.text.shw_f3a) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[6f]">shw_f3b</a> from menu.o(.text.shw_f3b) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[70]">shw_f3c</a> from menu.o(.text.shw_f3c) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[71]">shw_f3d</a> from menu.o(.text.shw_f3d) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[72]">shw_f3e</a> from menu.o(.text.shw_f3e) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[74]">shw_f4a_fix</a> from menu.o(.text.shw_f4a_fix) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[75]">shw_f4b_flot</a> from menu.o(.text.shw_f4b_flot) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[77]">shw_f5a_slow</a> from menu.o(.text.shw_f5a_slow) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[78]">shw_f5b_normal</a> from menu.o(.text.shw_f5b_normal) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[79]">shw_f5c_fast</a> from menu.o(.text.shw_f5c_fast) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[7b]">shw_f6a_1</a> from menu.o(.text.shw_f6a_1) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[7c]">shw_f6b_2</a> from menu.o(.text.shw_f6b_2) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[7d]">shw_f6c_5</a> from menu.o(.text.shw_f6c_5) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[7e]">shw_f6d_10</a> from menu.o(.text.shw_f6d_10) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[80]">shw_f7a_on</a> from menu.o(.text.shw_f7a_on) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[81]">shw_f7b_off</a> from menu.o(.text.shw_f7b_off) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[5f]">shw_f8</a> from menu.o(.text.shw_f8) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[83]">shw_f9a</a> from menu.o(.text.shw_f9a) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[5b]">shw_fixFloat</a> from menu.o(.text.shw_fixFloat) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[5b]">shw_fixFloat</a> from menu.o(.text.shw_fixFloat) referenced from menu.o(.text.shw_fixFloat)
 <LI><a href="#[60]">shw_gravity</a> from menu.o(.text.shw_gravity) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[56]">shw_mainScreen</a> from menu.o(.text.shw_mainScreen) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[5d]">shw_minCoin</a> from menu.o(.text.shw_minCoin) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[5d]">shw_minCoin</a> from menu.o(.text.shw_minCoin) referenced from menu.o(.text.shw_minCoin)
 <LI><a href="#[5e]">shw_multiTare</a> from menu.o(.text.shw_multiTare) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[5e]">shw_multiTare</a> from menu.o(.text.shw_multiTare) referenced from menu.o(.text.shw_multiTare)
 <LI><a href="#[61]">shw_reset</a> from menu.o(.text.shw_reset) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[58]">shw_resolution</a> from menu.o(.text.shw_resolution) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[58]">shw_resolution</a> from menu.o(.text.shw_resolution) referenced from menu.o(.text.shw_resolution)
 <LI><a href="#[62]">shw_rs232</a> from menu.o(.text.shw_rs232) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[5c]">shw_speed</a> from menu.o(.text.shw_speed) referenced from menu.o(.text.Menu_Init)
 <LI><a href="#[5c]">shw_speed</a> from menu.o(.text.shw_speed) referenced from menu.o(.text.shw_speed)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[be]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[de]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[147]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[148]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[149]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[14a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[14b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP01_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP01_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>CLKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CRPT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DEFAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EADC_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EADC_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EADC_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EADC_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>IRCTRIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>OPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PSIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PWM0_P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PWM0_P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PWM0_P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PWM1_P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PWM1_P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PWM1_P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USCI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USCI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>SH_DoCommand</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_m251.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[bd]"></a>__PC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_m251.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[c1]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_ClearScreen
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f8]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Show_Weight
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ShowTotal
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInput
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetMeasure
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ShowTotal
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getWeight
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_calculateCalibrationFactor
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetMeasure
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickCounter
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_fcmple</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Show_Weight
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ShowTotal
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getWeight
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_calculateCalibrationFactor
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlashMemoryInformation
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetMeasure
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickCounter
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetMeasure
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Show_Weight
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ShowTotal
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlashMemoryInformation
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_d2lz</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2lz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickCounter
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shw_calibration
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Show_Weight
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ShowTotal
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetMeasure
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInput
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>

<P><STRONG><a name="[150]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>

<P><STRONG><a name="[151]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__strtod_int</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[152]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[c4]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[d7]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ca]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bf]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[153]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__aeabi_uidiv$div0</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[155]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>isspace</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, isspace_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[e3]"></a>_scanf_really_real</STRONG> (Thumb, 584 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[4a]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[e1]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[156]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__ctype_lookup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_ul2d</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[f9]"></a>APP_All_Point_High</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, app.o(.text.APP_All_Point_High))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = APP_All_Point_High
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_StartScreen
</UL>

<P><STRONG><a name="[e6]"></a>APP_GetMeasure</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, app.o(.text.APP_GetMeasure))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = APP_GetMeasure &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Show_Weight
</UL>

<P><STRONG><a name="[e9]"></a>APP_Handle</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, app.o(.text.APP_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = APP_Handle &rArr; setPrice &rArr; customValueInputFix &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Show_Weight
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_StartScreen
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ShowTotal
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrice
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SettingsHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>APP_Init</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, app.o(.text.APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = APP_Init &rArr; readFlashMemoryInformation &rArr; InitFactorySetting &rArr; writeFlashMemoryInformation &rArr; eeprom_write_array &rArr; FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newMenuObj
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newScaleObj
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newKeyPadObj
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newLCDObj
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlashMemoryInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>APP_SettingsHandle</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, app.o(.text.APP_SettingsHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = APP_SettingsHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Handle
</UL>

<P><STRONG><a name="[ee]"></a>APP_ShowTotal</STRONG> (Thumb, 372 bytes, Stack size 72 bytes, app.o(.text.APP_ShowTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = APP_ShowTotal &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Handle
</UL>

<P><STRONG><a name="[ec]"></a>APP_Show_Weight</STRONG> (Thumb, 476 bytes, Stack size 80 bytes, app.o(.text.APP_Show_Weight))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = APP_Show_Weight &rArr; APP_GetMeasure &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetMeasure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Handle
</UL>

<P><STRONG><a name="[ea]"></a>APP_StartScreen</STRONG> (Thumb, 1548 bytes, Stack size 176 bytes, app.o(.text.APP_StartScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = APP_StartScreen &rArr; APP_All_Point_High
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_All_Point_High
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickLongDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Handle
</UL>

<P><STRONG><a name="[103]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, clk.o(.text.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[102]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, clk.o(.text.CLK_EnableXtalRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[fb]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[fd]"></a>CLK_GetPCLK0Freq</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, clk.o(.text.CLK_GetPCLK0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_GetPCLK0Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
</UL>

<P><STRONG><a name="[fe]"></a>CLK_GetPCLK1Freq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, clk.o(.text.CLK_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
</UL>

<P><STRONG><a name="[11c]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 160 bytes, Stack size 28 bytes, clk.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[ff]"></a>CLK_SetHCLK</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, clk.o(.text.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[104]"></a>CLK_SetModuleClock</STRONG> (Thumb, 160 bytes, Stack size 52 bytes, clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[100]"></a>CLK_WaitClockReady</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, clk.o(.text.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[101]"></a>Clock_Init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, clk_conf.o(.text.Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Clock_Init &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[11]"></a>EINT0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, int_handler.o(.text.EINT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EINT0_IRQHandler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EINT1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, int_handler.o(.text.EINT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EINT1_IRQHandler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, int_handler.o(.text.EINT3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EINT3_IRQHandler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[135]"></a>FMC_Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text.FMC_Close))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_array
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_array
</UL>

<P><STRONG><a name="[137]"></a>FMC_Erase</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, fmc.o(.text.FMC_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_array
</UL>

<P><STRONG><a name="[106]"></a>FMC_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, periph_conf.o(.text.FMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[107]"></a>FMC_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_array
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_array
</UL>

<P><STRONG><a name="[134]"></a>FMC_Read</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fmc.o(.text.FMC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_array
</UL>

<P><STRONG><a name="[138]"></a>FMC_Write</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, fmc.o(.text.FMC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_array
</UL>

<P><STRONG><a name="[18]"></a>GPB_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, int_handler.o(.text.GPB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPB_IRQHandler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GPC_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, int_handler.o(.text.GPC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPC_IRQHandler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPD_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, int_handler.o(.text.GPD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPD_IRQHandler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>GPIO_Init</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, periph_conf.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_Init &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[4]"></a>GetChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.text.GetChar))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>I2C1_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, periph_conf.o(.text.I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = I2C1_Init &rArr; I2C_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[10b]"></a>I2C_Open</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, i2c.o(.text.I2C_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2C_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
</UL>

<P><STRONG><a name="[111]"></a>I2C_ReadByteOneReg</STRONG> (Thumb, 672 bytes, Stack size 40 bytes, i2c.o(.text.I2C_ReadByteOneReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_ReadByteOneReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getRegister
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getReading
</UL>

<P><STRONG><a name="[112]"></a>I2C_WriteByteOneReg</STRONG> (Thumb, 504 bytes, Stack size 52 bytes, i2c.o(.text.I2C_WriteByteOneReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_WriteByteOneReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setRegister
</UL>

<P><STRONG><a name="[10c]"></a>InitFactorySetting</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, eeproom.o(.text.InitFactorySetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = InitFactorySetting &rArr; writeFlashMemoryInformation &rArr; eeprom_write_array &rArr; FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlashMemoryInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlashMemoryInformation
</UL>

<P><STRONG><a name="[9d]"></a>NAU7802_available</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sparkfun_nau7802.o(.text.NAU7802_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NAU7802_available &rArr; NAU7802_getBit &rArr; NAU7802_getRegister &rArr; I2C_ReadByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getAverage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[9b]"></a>NAU7802_begin</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, sparkfun_nau7802.o(.text.NAU7802_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = NAU7802_begin &rArr; NAU7802_calibrateAFE &rArr; NAU7802_waitForCalibrateAFE &rArr; millis &rArr; SysTickCounter &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setRegister
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setBit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_powerUp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_reset
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_calibrateAFE
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setSampleRate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setLDO
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setGain
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_isConnected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[ac]"></a>NAU7802_beginCalibrateAFE</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sparkfun_nau7802.o(.text.NAU7802_beginCalibrateAFE))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = NAU7802_beginCalibrateAFE &rArr; NAU7802_setBit &rArr; NAU7802_setRegister &rArr; I2C_WriteByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_calibrateAFE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[ae]"></a>NAU7802_calAFEStatus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sparkfun_nau7802.o(.text.NAU7802_calAFEStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NAU7802_calAFEStatus &rArr; NAU7802_getBit &rArr; NAU7802_getRegister &rArr; I2C_ReadByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_waitForCalibrateAFE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[a3]"></a>NAU7802_calculateCalibrationFactor</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sparkfun_nau7802.o(.text.NAU7802_calculateCalibrationFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NAU7802_calculateCalibrationFactor &rArr; NAU7802_getAverage &rArr; millis &rArr; SysTickCounter &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setCalibrationFactor
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getAverage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[a0]"></a>NAU7802_calculateZeroOffset</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sparkfun_nau7802.o(.text.NAU7802_calculateZeroOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = NAU7802_calculateZeroOffset &rArr; NAU7802_getAverage &rArr; millis &rArr; SysTickCounter &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setZeroOffset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getAverage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[ab]"></a>NAU7802_calibrateAFE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sparkfun_nau7802.o(.text.NAU7802_calibrateAFE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = NAU7802_calibrateAFE &rArr; NAU7802_waitForCalibrateAFE &rArr; millis &rArr; SysTickCounter &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_waitForCalibrateAFE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_beginCalibrateAFE
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[b6]"></a>NAU7802_clearBit</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, sparkfun_nau7802.o(.text.NAU7802_clearBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = NAU7802_clearBit &rArr; NAU7802_setRegister &rArr; I2C_WriteByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setRegister
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setIntPolarityHigh
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_powerDown
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_reset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[9f]"></a>NAU7802_getAverage</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, sparkfun_nau7802.o(.text.NAU7802_getAverage))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = NAU7802_getAverage &rArr; millis &rArr; SysTickCounter &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getReading
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_available
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getWeight
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_calculateCalibrationFactor
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_calculateZeroOffset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[b7]"></a>NAU7802_getBit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sparkfun_nau7802.o(.text.NAU7802_getBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NAU7802_getBit &rArr; NAU7802_getRegister &rArr; I2C_ReadByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_powerUp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_calAFEStatus
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_available
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[a5]"></a>NAU7802_getCalibrationFactor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sparkfun_nau7802.o(.text.NAU7802_getCalibrationFactor))
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[9e]"></a>NAU7802_getReading</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, sparkfun_nau7802.o(.text.NAU7802_getReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NAU7802_getReading &rArr; I2C_ReadByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByteOneReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getAverage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[b8]"></a>NAU7802_getRegister</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sparkfun_nau7802.o(.text.NAU7802_getRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NAU7802_getRegister &rArr; I2C_ReadByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByteOneReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getBit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_clearBit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setBit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getRevisionCode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setSampleRate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setLDO
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setGain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[b4]"></a>NAU7802_getRevisionCode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sparkfun_nau7802.o(.text.NAU7802_getRevisionCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NAU7802_getRevisionCode &rArr; NAU7802_getRegister &rArr; I2C_ReadByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[a6]"></a>NAU7802_getWeight</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, sparkfun_nau7802.o(.text.NAU7802_getWeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = NAU7802_getWeight &rArr; NAU7802_getAverage &rArr; millis &rArr; SysTickCounter &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getAverage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[a2]"></a>NAU7802_getZeroOffset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sparkfun_nau7802.o(.text.NAU7802_getZeroOffset))
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[9c]"></a>NAU7802_isConnected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sparkfun_nau7802.o(.text.NAU7802_isConnected))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[b1]"></a>NAU7802_powerDown</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sparkfun_nau7802.o(.text.NAU7802_powerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = NAU7802_powerDown &rArr; NAU7802_clearBit &rArr; NAU7802_setRegister &rArr; I2C_WriteByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_clearBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[b0]"></a>NAU7802_powerUp</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sparkfun_nau7802.o(.text.NAU7802_powerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = NAU7802_powerUp &rArr; NAU7802_setBit &rArr; NAU7802_setRegister &rArr; I2C_WriteByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getBit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setBit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[af]"></a>NAU7802_reset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sparkfun_nau7802.o(.text.NAU7802_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = NAU7802_reset &rArr; NAU7802_clearBit &rArr; NAU7802_setRegister &rArr; I2C_WriteByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_clearBit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setBit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[b5]"></a>NAU7802_setBit</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, sparkfun_nau7802.o(.text.NAU7802_setBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = NAU7802_setBit &rArr; NAU7802_setRegister &rArr; I2C_WriteByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setRegister
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setIntPolarityLow
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_powerUp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_reset
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_beginCalibrateAFE
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setChannel
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setLDO
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[a4]"></a>NAU7802_setCalibrationFactor</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, sparkfun_nau7802.o(.text.NAU7802_setCalibrationFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NAU7802_setCalibrationFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_calculateCalibrationFactor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[aa]"></a>NAU7802_setChannel</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sparkfun_nau7802.o(.text.NAU7802_setChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = NAU7802_setChannel &rArr; NAU7802_clearBit &rArr; NAU7802_setRegister &rArr; I2C_WriteByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_clearBit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[a7]"></a>NAU7802_setGain</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sparkfun_nau7802.o(.text.NAU7802_setGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = NAU7802_setGain &rArr; NAU7802_setRegister &rArr; I2C_WriteByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setRegister
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[b2]"></a>NAU7802_setIntPolarityHigh</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sparkfun_nau7802.o(.text.NAU7802_setIntPolarityHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = NAU7802_setIntPolarityHigh &rArr; NAU7802_clearBit &rArr; NAU7802_setRegister &rArr; I2C_WriteByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_clearBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[b3]"></a>NAU7802_setIntPolarityLow</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sparkfun_nau7802.o(.text.NAU7802_setIntPolarityLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = NAU7802_setIntPolarityLow &rArr; NAU7802_setBit &rArr; NAU7802_setRegister &rArr; I2C_WriteByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[a8]"></a>NAU7802_setLDO</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sparkfun_nau7802.o(.text.NAU7802_setLDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = NAU7802_setLDO &rArr; NAU7802_setBit &rArr; NAU7802_setRegister &rArr; I2C_WriteByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setRegister
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getRegister
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[b9]"></a>NAU7802_setRegister</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sparkfun_nau7802.o(.text.NAU7802_setRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = NAU7802_setRegister &rArr; I2C_WriteByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByteOneReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_clearBit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setBit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setSampleRate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setLDO
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setGain
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[a9]"></a>NAU7802_setSampleRate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sparkfun_nau7802.o(.text.NAU7802_setSampleRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = NAU7802_setSampleRate &rArr; NAU7802_setRegister &rArr; I2C_WriteByteOneReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_setRegister
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[a1]"></a>NAU7802_setZeroOffset</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, sparkfun_nau7802.o(.text.NAU7802_setZeroOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NAU7802_setZeroOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_calculateZeroOffset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[ad]"></a>NAU7802_waitForCalibrateAFE</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sparkfun_nau7802.o(.text.NAU7802_waitForCalibrateAFE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NAU7802_waitForCalibrateAFE &rArr; millis &rArr; SysTickCounter &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_calAFEStatus
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_calibrateAFE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sparkfun_nau7802.o(.text.newScaleObj)
</UL>
<P><STRONG><a name="[113]"></a>Periph_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, periph_conf.o(.text.Periph_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Periph_Init &rArr; TIMER1_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPII2S0_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[122]"></a>Pin_Init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pin_conf.o(.text.Pin_Init))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[48]"></a>ProcessHardFault</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, retarget.o(.text.ProcessHardFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ProcessHardFault &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpStack
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>SCREEN_1_AIP_A0Pin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_1_AIP_A0Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_1_AIP_A0Pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[4f]"></a>SCREEN_1_AIP_CSPin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_1_AIP_CSPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_1_AIP_CSPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[4e]"></a>SCREEN_1_AIP_ResetPin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_1_AIP_ResetPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_1_AIP_ResetPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[50]"></a>SCREEN_2_AIP_A0Pin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_2_AIP_A0Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_2_AIP_A0Pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[52]"></a>SCREEN_2_AIP_CSPin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_2_AIP_CSPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_2_AIP_CSPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[51]"></a>SCREEN_2_AIP_ResetPin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_2_AIP_ResetPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_2_AIP_ResetPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[53]"></a>SCREEN_3_AIP_A0Pin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_3_AIP_A0Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_3_AIP_A0Pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[55]"></a>SCREEN_3_AIP_CSPin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_3_AIP_CSPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_3_AIP_CSPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[54]"></a>SCREEN_3_AIP_ResetPin</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, app.o(.text.SCREEN_3_AIP_ResetPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCREEN_3_AIP_ResetPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.APP_Init)
</UL>
<P><STRONG><a name="[49]"></a>SH_Return</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, retarget.o(.text.SH_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SH_Return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>SPII2S0_Init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, periph_conf.o(.text.SPII2S0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SPII2S0_Init &rArr; SPI_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetFIFO
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[11a]"></a>SPI_Open</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, spi.o(.text.SPI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SPI_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPII2S0_Init
</UL>

<P><STRONG><a name="[11b]"></a>SPI_SetFIFO</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, spi.o(.text.SPI_SetFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_SetFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPII2S0_Init
</UL>

<P><STRONG><a name="[11e]"></a>SendChar</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(.text.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[3]"></a>SendChar_ToUART</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, retarget.o(.text.SendChar_ToUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>SysTickCounter</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, millis.o(.text.SysTickCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SysTickCounter &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>

<P><STRONG><a name="[fc]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, system_m251.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>

<P><STRONG><a name="[46]"></a>SystemInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_m251.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>System_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = System_Init &rArr; Periph_Init &rArr; TIMER1_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>TIMER0_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, periph_conf.o(.text.TIMER0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = TIMER0_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[117]"></a>TIMER1_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, periph_conf.o(.text.TIMER1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = TIMER1_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[126]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, timer.o(.text.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[124]"></a>TIMER_Open</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, timer.o(.text.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init
</UL>

<P><STRONG><a name="[27]"></a>TMR0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, int_handler.o(.text.TMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR0_IRQHandler &rArr; TIMER_ClearIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearIntFlag
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, int_handler.o(.text.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR1_IRQHandler &rArr; TIMER_ClearIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearIntFlag
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>UART2_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, periph_conf.o(.text.UART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = UART2_Init &rArr; UART_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[129]"></a>UART_Open</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, uart.o(.text.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = UART_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>

<P><STRONG><a name="[f]"></a>WDT_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, int_handler.o(.text.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_tickCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>WDT_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, periph_conf.o(.text.WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDT_Init &rArr; WDT_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_EnableInt
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Init
</UL>

<P><STRONG><a name="[12c]"></a>WDT_Open</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wdt.o(.text.WDT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[131]"></a>_pow</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app.o(.text._pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _pow
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
</UL>

<P><STRONG><a name="[10e]"></a>build</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(.text.build))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = build
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shw_multiTare
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shw_minCoin
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shw_speed
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shw_fixFloat
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shw_decimalPoint
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shw_capacity
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shw_resolution
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
</UL>

<P><STRONG><a name="[12e]"></a>customValueInput</STRONG> (Thumb, 640 bytes, Stack size 48 bytes, app.o(.text.customValueInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = customValueInput &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrice
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shw_f9a
</UL>

<P><STRONG><a name="[130]"></a>customValueInputFix</STRONG> (Thumb, 1192 bytes, Stack size 112 bytes, app.o(.text.customValueInputFix))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = customValueInputFix &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pow
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlashMemoryInformation
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrice
</UL>

<P><STRONG><a name="[132]"></a>eeprom_read_array</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, eeproom.o(.text.eeprom_read_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eeprom_read_array &rArr; FMC_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlashMemoryInformation
</UL>

<P><STRONG><a name="[136]"></a>eeprom_write_array</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, eeproom.o(.text.eeprom_write_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = eeprom_write_array &rArr; FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlashMemoryInformation
</UL>

<P><STRONG><a name="[63]"></a>f0_Saved</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, menu.o(.text.f0_Saved))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = f0_Saved &rArr; writeFlashMemoryInformation &rArr; eeprom_write_array &rArr; FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlashMemoryInformation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[68]"></a>f1_Saved</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, menu.o(.text.f1_Saved))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = f1_Saved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[6d]"></a>f2_Saved</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, menu.o(.text.f2_Saved))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = f2_Saved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[73]"></a>f3_Saved</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, menu.o(.text.f3_Saved))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = f3_Saved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[76]"></a>f4_Saved</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, menu.o(.text.f4_Saved))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = f4_Saved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[7a]"></a>f5_Saved</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, menu.o(.text.f5_Saved))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = f5_Saved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[7f]"></a>f6_Saved</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, menu.o(.text.f6_Saved))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = f6_Saved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[82]"></a>f7_Saved</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, menu.o(.text.f7_Saved))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = f7_Saved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[ba]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, retarget.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fputc &rArr; SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[45]"></a>main</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = main &rArr; APP_Handle &rArr; setPrice &rArr; customValueInputFix &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Handle
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[10f]"></a>millis</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, millis.o(.text.millis))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = millis &rArr; SysTickCounter &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_waitForCalibrateAFE
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getAverage
</UL>

<P><STRONG><a name="[f2]"></a>newKeyPadObj</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, keypad.o(.text.newKeyPadObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = newKeyPadObj &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[f1]"></a>newLCDObj</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, costumlcd.o(.text.newLCDObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = newLCDObj &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[f4]"></a>newMenuObj</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, menu.o(.text.newMenuObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = newMenuObj &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[f3]"></a>newScaleObj</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, sparkfun_nau7802.o(.text.newScaleObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = newScaleObj &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[f0]"></a>readFlashMemoryInformation</STRONG> (Thumb, 108 bytes, Stack size 96 bytes, eeproom.o(.text.readFlashMemoryInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = readFlashMemoryInformation &rArr; InitFactorySetting &rArr; writeFlashMemoryInformation &rArr; eeprom_write_array &rArr; FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFactorySetting
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_array
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[ed]"></a>setPrice</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, app.o(.text.setPrice))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = setPrice &rArr; customValueInputFix &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInput
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Handle
</UL>

<P><STRONG><a name="[57]"></a>shw_calibration</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, menu.o(.text.shw_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = shw_calibration &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[59]"></a>shw_capacity</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, menu.o(.text.shw_capacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shw_capacity &rArr; build
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu.o(.text.shw_capacity)
<LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[5a]"></a>shw_decimalPoint</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, menu.o(.text.shw_decimalPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shw_decimalPoint &rArr; build
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu.o(.text.shw_decimalPoint)
<LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[84]"></a>shw_f10a</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, menu.o(.text.shw_f10a))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f10a
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[64]"></a>shw_f1a_3000</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, menu.o(.text.shw_f1a_3000))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shw_f1a_3000
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[65]"></a>shw_f1b_6000</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f1b_6000))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f1b_6000
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[66]"></a>shw_f1c_dual1</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f1c_dual1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f1c_dual1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[67]"></a>shw_f1d_dual2</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f1d_dual2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f1d_dual2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[69]"></a>shw_f2a_3</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, menu.o(.text.shw_f2a_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shw_f2a_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[6a]"></a>shw_f2b_6</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f2b_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f2b_6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[6b]"></a>shw_f2c_15</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f2c_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f2c_15
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[6c]"></a>shw_f2d_30</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f2d_30))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f2d_30
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[6e]"></a>shw_f3a</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, menu.o(.text.shw_f3a))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shw_f3a
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[6f]"></a>shw_f3b</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f3b))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f3b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[70]"></a>shw_f3c</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f3c))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f3c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[71]"></a>shw_f3d</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f3d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[72]"></a>shw_f3e</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f3e))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f3e
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[74]"></a>shw_f4a_fix</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, menu.o(.text.shw_f4a_fix))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shw_f4a_fix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[75]"></a>shw_f4b_flot</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f4b_flot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f4b_flot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[77]"></a>shw_f5a_slow</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, menu.o(.text.shw_f5a_slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shw_f5a_slow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[78]"></a>shw_f5b_normal</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f5b_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f5b_normal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[79]"></a>shw_f5c_fast</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f5c_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f5c_fast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[7b]"></a>shw_f6a_1</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, menu.o(.text.shw_f6a_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shw_f6a_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[7c]"></a>shw_f6b_2</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f6b_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f6b_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[7d]"></a>shw_f6c_5</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f6c_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f6c_5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[7e]"></a>shw_f6d_10</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f6d_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f6d_10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[80]"></a>shw_f7a_on</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, menu.o(.text.shw_f7a_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shw_f7a_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[81]"></a>shw_f7b_off</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu.o(.text.shw_f7b_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shw_f7b_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[5f]"></a>shw_f8</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, menu.o(.text.shw_f8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shw_f8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[83]"></a>shw_f9a</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, menu.o(.text.shw_f9a))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = shw_f9a &rArr; customValueInput &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[5b]"></a>shw_fixFloat</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, menu.o(.text.shw_fixFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shw_fixFloat &rArr; build
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu.o(.text.shw_fixFloat)
<LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[60]"></a>shw_gravity</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, menu.o(.text.shw_gravity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shw_gravity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[56]"></a>shw_mainScreen</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, menu.o(.text.shw_mainScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shw_mainScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[5d]"></a>shw_minCoin</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, menu.o(.text.shw_minCoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shw_minCoin &rArr; build
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu.o(.text.shw_minCoin)
<LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[5e]"></a>shw_multiTare</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, menu.o(.text.shw_multiTare))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shw_multiTare &rArr; build
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu.o(.text.shw_multiTare)
<LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[61]"></a>shw_reset</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, menu.o(.text.shw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shw_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[58]"></a>shw_resolution</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, menu.o(.text.shw_resolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shw_resolution &rArr; build
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu.o(.text.shw_resolution)
<LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[62]"></a>shw_rs232</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, menu.o(.text.shw_rs232))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shw_rs232
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[5c]"></a>shw_speed</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, menu.o(.text.shw_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shw_speed &rArr; build
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu.o(.text.shw_speed)
<LI> menu.o(.text.Menu_Init)
</UL>
<P><STRONG><a name="[12a]"></a>wdt_tickCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, millis.o(.text.wdt_tickCounter))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>writeFlashMemoryInformation</STRONG> (Thumb, 96 bytes, Stack size 96 bytes, eeproom.o(.text.writeFlashMemoryInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = writeFlashMemoryInformation &rArr; eeprom_write_array &rArr; FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_array
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f0_Saved
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFactorySetting
</UL>

<P><STRONG><a name="[13c]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[157]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[158]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[159]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[105]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT0_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPD_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPC_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPB_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15a]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[15b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[15c]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[f6]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shw_calibration
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Show_Weight
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ShowTotal
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
</UL>

<P><STRONG><a name="[d6]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[144]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[15d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[15e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[15f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[145]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[e4]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[12f]"></a>atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInput
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customValueInputFix
</UL>

<P><STRONG><a name="[13a]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newMenuObj
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newScaleObj
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newKeyPadObj
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newLCDObj
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[119]"></a>DumpStack</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, retarget.o(.text.DumpStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DumpStack
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
</UL>

<P><STRONG><a name="[121]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[123]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[109]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, periph_conf.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[125]"></a>TIMER_EnableInt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, periph_conf.o(.text.TIMER_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init
</UL>

<P><STRONG><a name="[12b]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, periph_conf.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[12d]"></a>WDT_EnableInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, periph_conf.o(.text.WDT_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[127]"></a>TIMER_GetIntFlag</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, int_handler.o(.text.TIMER_GetIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>TIMER_ClearIntFlag</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, int_handler.o(.text.TIMER_ClearIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>CLK_SysTickLongDelay</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, app.o(.text.CLK_SysTickLongDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_SysTickLongDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_StartScreen
</UL>

<P><STRONG><a name="[8a]"></a>AIP_Init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, costumlcd.o(.text.AIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AIP_Init &rArr; AIP_writeCommand &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[8b]"></a>AIP_writeData</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, costumlcd.o(.text.AIP_writeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AIP_writeData &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_UpdateScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[8c]"></a>AIP_writeCommand</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, costumlcd.o(.text.AIP_writeCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AIP_writeCommand &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_UpdateScreen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[8d]"></a>AIP_ClearScreen</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, costumlcd.o(.text.AIP_ClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AIP_ClearScreen &rArr; AIP_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_SetCursor
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_WriteStringLen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_WriteString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[8e]"></a>AIP_UpdateScreen</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, costumlcd.o(.text.AIP_UpdateScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AIP_UpdateScreen &rArr; AIP_writeData &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeCommand
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[8f]"></a>AIP_draw_pixel</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, costumlcd.o(.text.AIP_draw_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AIP_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_Spoint
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[90]"></a>AIP_writeChar</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, costumlcd.o(.text.AIP_writeChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AIP_writeChar &rArr; AIP_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeNumber
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_WriteStringLen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_WriteString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[91]"></a>AIP_SetCursor</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, costumlcd.o(.text.AIP_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AIP_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_WriteStringLen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_WriteString
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_ClearScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[92]"></a>AIP_WriteString</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, costumlcd.o(.text.AIP_WriteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AIP_WriteString &rArr; AIP_writeChar &rArr; AIP_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_Spoint
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_SetCursor
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeChar
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_ClearScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[93]"></a>AIP_WriteStringLen</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, costumlcd.o(.text.AIP_WriteStringLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AIP_WriteStringLen &rArr; AIP_writeChar &rArr; AIP_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_Spoint
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_SetCursor
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeChar
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_ClearScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[94]"></a>AIP_Spoint</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, costumlcd.o(.text.AIP_Spoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AIP_Spoint &rArr; AIP_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_WriteStringLen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_WriteString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[95]"></a>AIP_writeNumber</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, costumlcd.o(.text.AIP_writeNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AIP_writeNumber &rArr; AIP_writeChar &rArr; AIP_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> costumlcd.o(.text.newLCDObj)
</UL>
<P><STRONG><a name="[e5]"></a>spi_transfer</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, costumlcd.o(.text.spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeCommand
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIP_writeData
</UL>

<P><STRONG><a name="[85]"></a>Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, keypad.o(.text.Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keypad.o(.text.newKeyPadObj)
</UL>
<P><STRONG><a name="[86]"></a>Scan</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, keypad.o(.text.Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Scan &rArr; readRowPin
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRowPin
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetAllColumnPins
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColumnPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keypad.o(.text.newKeyPadObj)
</UL>
<P><STRONG><a name="[87]"></a>setColumnPin</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, keypad.o(.text.setColumnPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setColumnPin
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keypad.o(.text.newKeyPadObj)
</UL>
<P><STRONG><a name="[88]"></a>resetAllColumnPins</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, keypad.o(.text.resetAllColumnPins))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keypad.o(.text.newKeyPadObj)
</UL>
<P><STRONG><a name="[89]"></a>readRowPin</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, keypad.o(.text.readRowPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readRowPin
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keypad.o(.text.newKeyPadObj)
</UL>
<P><STRONG><a name="[11d]"></a>CLK_SysTickDelay</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, keypad.o(.text.CLK_SysTickDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan
</UL>

<P><STRONG><a name="[96]"></a>Menu_Init</STRONG> (Thumb, 972 bytes, Stack size 208 bytes, menu.o(.text.Menu_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Menu_Init &rArr; build
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.newMenuObj)
</UL>
<P><STRONG><a name="[97]"></a>Enter</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, menu.o(.text.Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.newMenuObj)
</UL>
<P><STRONG><a name="[98]"></a>Exit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, menu.o(.text.Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.newMenuObj)
</UL>
<P><STRONG><a name="[99]"></a>Up</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, menu.o(.text.Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.newMenuObj)
</UL>
<P><STRONG><a name="[9a]"></a>Down</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, menu.o(.text.Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.newMenuObj)
</UL>
<P><STRONG><a name="[110]"></a>CLK_SysTickDelay</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, sparkfun_nau7802.o(.text.CLK_SysTickDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_powerUp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_reset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_waitForCalibrateAFE
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU7802_getAverage
</UL>

<P><STRONG><a name="[133]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, eeproom.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_array
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_array
</UL>

<P><STRONG><a name="[139]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eeproom.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_array
</UL>

<P><STRONG><a name="[13f]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13d]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[142]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[141]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bb]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[d3]"></a>_local_sscanf</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[e0]"></a>_fp_value</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
